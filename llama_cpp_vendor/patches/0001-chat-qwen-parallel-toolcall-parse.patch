diff --git a/common/chat-parser.h b/common/chat-parser.h
index 7ee35505..f0e5bd5c 100644
--- a/common/chat-parser.h
+++ b/common/chat-parser.h
@@ -46,6 +46,10 @@ class common_chat_msg_parser {
         pos_ -= n;
     }
 
+    bool at_end() const {
+        return pos_ >= input_.size();
+    }
+
     // Get the substring of the input at the given range
     std::string str(const common_string_range & rng) const;
 
diff --git a/common/chat.cpp b/common/chat.cpp
index 1d6974a8..87df876d 100644
--- a/common/chat.cpp
+++ b/common/chat.cpp
@@ -1635,7 +1635,7 @@ static void common_chat_parse_hermes_2_pro(common_chat_msg_parser & builder) {
         "|<function name=\"([^\"]+)\">"  // match 5 (function name again)
     );
 
-    if (auto res = builder.try_find_regex(open_regex)) {
+    while (auto res = builder.try_find_regex(open_regex)) {
         const auto & block_start = res->groups[1];
         std::string block_end = block_start.empty() ? "" : "```";
 
@@ -1657,7 +1657,6 @@ static void common_chat_parse_hermes_2_pro(common_chat_msg_parser & builder) {
                     builder.consume_literal(block_end);
                     builder.consume_spaces();
                 }
-                builder.add_content(builder.consume_rest());
             } else {
                 throw common_chat_msg_partial_exception("failed to parse tool call");
             }
@@ -1682,9 +1681,9 @@ static void common_chat_parse_hermes_2_pro(common_chat_msg_parser & builder) {
                     builder.consume_spaces();
                 }
             }
-            builder.add_content(builder.consume_rest());
         }
-    } else {
+    }
+    if (!builder.at_end()) {
         builder.add_content(builder.consume_rest());
     }
 }
